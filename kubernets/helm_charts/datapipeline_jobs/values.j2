namespace: {{ flink_namespace }}
imagepullsecrets: {{ imagepullsecrets }}
dockerhub: {{ dockerhub }}
repository: {{flink_repository|default('knowledge-platform-jobs')}}
image_tag: {{ image_tag }}
serviceMonitor:
  enabled: {{ service_monitor_enabled | lower}}

replicaCount: {{taskmana_replicacount|default(1)}}

jobmanager:
  rpc_port: {{ jobmanager_rpc_port }}
  blob_port: {{ jobmanager_blob_port }}
  query_port: {{ jobmanager_query_port }}
  ui_port: {{ jobmanager_ui_port }}
  prom_port: {{ jobmanager_prom_port }}
  heap_memory: {{ jobmanager_heap_memory }}

service: {{ jobmanager_ui_service|to_json }}

rest_port: {{ jobmanager_ui_rest_port }}
resttcp_port: {{ jobmanager_ui_tcp_port }}

taskmanager:
  prom_port: {{ taskmanager_prom_port }}
  rpc_port: {{ taskmanager_rpc_port }}
  heap_memory: {{ taskmanager_heap_memory }}
  replicas: {{taskmanager_replicacount|default(1)}}

job_classname: {{ job_classname }}
{{ taskmanager_liveness | to_nice_yaml }}

log4j_console_properties: |
  # This affects logging for both user code and Flink
  rootLogger.level = {{ flink_jobs_console_log_level | default(INFO) }}
  rootLogger.appenderRef.console.ref = ConsoleAppender

  # Uncomment this if you want to _only_ change Flink's logging
  #logger.flink.name = org.apache.flink
  #logger.flink.level = {{ flink_jobs_console_log_level | default(INFO) }}

  # The following lines keep the log level of common libraries/connectors on
  # log level INFO. The root logger does not override this. You have to manually
  # change the log levels here.
  logger.akka.name = akka
  logger.akka.level = {{ flink_libraries_log_level | default(INFO) }}
  logger.kafka.name= org.apache.kafka
  logger.kafka.level = {{ flink_libraries_log_level | default(INFO) }}
  logger.hadoop.name = org.apache.hadoop
  logger.hadoop.level = {{ flink_libraries_log_level | default(INFO) }}
  logger.zookeeper.name = org.apache.zookeeper
  logger.zookeeper.level = {{ flink_libraries_log_level | default(INFO) }}

  # Log all infos to the console
  appender.console.name = ConsoleAppender
  appender.console.type = CONSOLE
  appender.console.layout.type = PatternLayout
  appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n

  # Suppress the irrelevant (wrong) warnings from the Netty channel handler
  logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
  logger.netty.level = OFF

base_config: |
  kafka {
      broker-servers = "{{ kafka_brokers }}"
      zookeeper = "{{ zookeepers }}"
      producer {
        max-request-size = {{ producer_max_request_size }}
      }
    }
    job {
      env = "{{ env_name }}"
      enable.distributed.checkpointing = false
      statebackend {
        blob {
          storage {
            account = ""
            container = ""
            checkpointing.dir = "checkpoint"
          }
        }
        base.url = ""
      }
    }
    task {
      parallelism = 1
      consumer.parallelism = 1
      checkpointing.compressed = {{ checkpoint_compression_enabled|lower }}
      checkpointing.interval = {{ checkpoint_interval }}
      checkpointing.pause.between.seconds = {{ checkpoint_pause_between_seconds }}
      restart-strategy.attempts = {{ restart_attempts }}
      restart-strategy.delay = {{ restart_delay }} # in milli-seconds
    }
    redis {
      host = {{ dp_redis_host }}
      port = 6379
    }
    lms-cassandra {
      host = "{{ core_cassandra_connection_ip }}"
      port = "9042"
    }
    neo4j {
      routePath = "{{ neo4j_route_path }}"
      graph = "domain"
    }
    es {
        basePath = "{{ search_es_host }}"
    }
    schema {
      basePath = "{{ kp_schema_base_path }}"
      supportedVersion = {
        itemset = "2.0"
      }
    }

activity-aggregate-updater:
  activity-aggregate-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.coursebatch.job.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      output.failed.topic = {{ env_name }}.activity.agg.failed
      output.certissue.topic = {{ env_name }}.issue.certificate.request
      groupId = {{ env_name }}-activity-aggregate-group
    }
    task {
      window.shards = {{ activity_agg_window_shards }}
      checkpointing.interval = {{ activity_agg_checkpointing_interval }}
      checkpointing.pause.between.seconds = {{ activity_agg_checkpointing_pause_interval }}
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = {{ activity_agg_restart_strategy_delay }} # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ activity_agg_consumer_parallelism }}
      dedup.parallelism = {{ activity_agg_dedup_parallelism }}
      activity.agg.parallelism = {{ activity_agg_parallelism }}
      enrolment.complete.parallelism = {{ enrolment_complete_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    dedup-redis {
      host = {{ dedup_redis_host }}
      port = 6379
      database.index = {{ activity_agg_dedup_index }}
      database.expiry = {{ activity_agg_dedup_expiry }}
    }
    threshold.batch.read.interval = {{ activity_agg_batch_interval }}
    threshold.batch.read.size = {{ activity_agg_batch_read_size }}
    threshold.batch.write.size = {{ activity_agg_batch_write_size }}
    activity {
      module.aggs.enabled = true
      input.dedup.enabled = true
      filter.processed.enrolments = false
      collection.status.cache.expiry = {{ activity_agg_collection_status_cache_expiry_time }}
    }
    service {
      content.basePath = "{{ kp_content_service_base_url }}"
      search.basePath = "{{ kp_search_service_base_url }}"
    }


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['activity-aggregate-updater'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['activity-aggregate-updater'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['activity-aggregate-updater'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

program-activity-aggregate-updater:
  program-activity-aggregate-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.coursebatch.job.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      output.failed.topic = {{ env_name }}.activity.agg.failed
      output.certissue.topic = {{ env_name }}.issue.certificate.request
      groupId = {{ env_name }}-program-activity-aggregate-group
    }
    task {
      window.shards = {{ program_activity_agg_window_shards }}
      checkpointing.interval = {{ program_activity_agg_checkpointing_interval }}
      checkpointing.pause.between.seconds = {{ program_activity_agg_checkpointing_pause_interval }}
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ program_activity_agg_consumer_parallelism }}
      dedup.parallelism = {{ program_activity_agg_dedup_parallelism }}
      activity.agg.parallelism = {{ program_activity_agg_parallelism }}
      enrolment.complete.parallelism = {{ enrolment_complete_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    dedup-redis {
      host = {{ dedup_redis_host }}
      port = 6379
      database.index = {{ activity_agg_dedup_index }}
      database.expiry = {{ activity_agg_dedup_expiry }}
    }
    threshold.batch.read.interval = {{ activity_agg_batch_interval }}
    threshold.batch.read.size = {{ activity_agg_batch_read_size }}
    threshold.batch.write.size = {{ activity_agg_batch_write_size }}
    activity {
      module.aggs.enabled = true
      input.dedup.enabled = true
      filter.processed.enrolments = false
      collection.status.cache.expiry = {{ activity_agg_collection_status_cache_expiry_time }}
    }
    service {
      content.basePath = "{{ kp_content_service_base_url }}"
      search.basePath = "{{ kp_search_service_base_url }}"
    }


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['program-activity-aggregate-updater'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['program-activity-aggregate-updater'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['program-activity-aggregate-updater'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

relation-cache-updater:
  relation-cache-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.content.postpublish.request
      groupId = {{ env_name }}-relation-cache-updater-group
    }
    task {
      consumer.parallelism = {{ relation_cache_updater_consumer_parallelism }}
      parallelism = {{ relation_cache_updater_parallelism }}
    }
    lms-cassandra {
          keyspace = "{{ middleware_hierarchy_keyspace }}"
          table = "{{ middleware_content_hierarchy_table }}"
    }
    redis {
      database.index = 10
    }
    dp-redis {
      host = {{ dp_redis_host }}
      port = 6379
      database.index = 5
    }

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['relation-cache-updater'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['relation-cache-updater'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['relation-cache-updater'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

post-publish-processor:
  post-publish-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.content.postpublish.request
      groupId = {{ env_name }}-post-publish-processor-group
      publish.topic = {{ env_name }}.learning.job.request
      qrimage.topic = {{ env_name }}.qrimage.request
    }
    task {
      consumer.parallelism = {{ post_publish_processor_consumer_parallelism }}
      router.parallelism = {{ post_publish_event_router_parallelism }}
      shallow_copy.parallelism = {{ post_publish_shallow_copy_parallelism }}
      link_dialcode.parallelism = {{ post_publish_link_dialcode_parallelism }}
      batch_create.parallelism = {{ post_publish_batch_create_parallelism }}
      post-publish-relation-update.parallelism = {{ post_publish_relation_update_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      batchTable = "course_batch"
      sbKeyspace = sunbird
      certTemplateId = defaultCertTemplate
      systemSettingsTable = system_settings
      hierarchyStoreKeySpace = "{{ env}}_hierarchy_store"
      eventBatchTable = "event_batch"
      eventCertTemplateId = defaultEventCertTemplate
    }
    dialcode-cassandra {
      keyspace = "dialcodes"
      imageTable = "dialcode_images"
    }
    service {
      search.basePath = "{{ kp_search_service_base_url }}"
      lms.basePath = "{{ lms_service_base_url }}"
      learning_service.basePath = "{{ kp_learning_service_base_url }}"
      dial.basePath = "https://{{domain_name}}/dial/"
      content.basePath = "{{ kp_content_service_base_url }}"
    }

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['post-publish-processor'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['post-publish-processor'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['post-publish-processor'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

questionset-publish:
  questionset-publish: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.assessment.publish.request
      post_publish.topic = {{ env_name }}.content.postpublish.request
      output.postquestionsetpublish.topic = {{env_name}}.questionset.postpublish
      groupId = {{ env_name }}-questionset-publish-group
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
      router.parallelism = 1
    }
    question {
      keyspace = "{{ assessment_keyspace_name }}"
      table = "question_data"
    }
    questionset {
      keyspace = "{{ hierarchy_keyspace_name }}"
      table = "questionset_hierarchy"
    }
    print_service.base_url = "{{ kp_print_service_base_url }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cloud_storage_content_bucketname }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"

    master.category.validation.enabled ="{{ master_category_validation_enabled }}"

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['questionset-publish'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['questionset-publish'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['questionset-publish'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

search-indexer:
  search-indexer: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "{{ env_name }}.learning.graph.events"
      error.topic = "{{ env_name }}.learning.events.failed"
      groupId = "{{ env_name }}-search-indexer-group"
    }
    task {
      consumer.parallelism = {{ search_indexer_consumer_parallelism }}
      router.parallelism = {{ transaction_event_router_parallelism }}
      compositeSearch.parallelism = {{ composite_search_indexer_parallelism }}
      dialcodeIndexer.parallelism = {{ dialcode_external_indexer_parallelism }}
      dialcodemetricsIndexer.parallelism = {{ dialcode_metric_indexer_parallelism }}
    }
    compositesearch.index.name = "compositesearch"
    dialcode.index.name = "dialcode"
    dailcodemetrics.index.name = "dialcodemetrics"
    restrict.metadata.objectTypes = []
    nested.fields = ["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility", "taxonomyPaths_v2", "competencies_v3", "test_competencies_v2", "competencies_v2", "secureSettings", "test_competencies_v4", "competencies_v5", "test_secureSettings", "competencies_v6"]
    schema.definition_cache.expiry = {{ schema_definition_cache_expiry_in_sec }}
    restrict.objectTypes = ["EventSet", "Questionnaire", "Misconception", "FrameworkType", "EventSetImage", "EventImage"]
    ignored.fields={{ search_indexer_ignored_fields | to_json }}
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cloud_storage_content_bucketname }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['search-indexer'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['search-indexer'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['search-indexer'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

enrolment-reconciliation:
  enrolment-reconciliation: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.batch.enrolment.sync.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      output.failed.topic = {{ env_name }}.activity.agg.failed
      output.certissue.topic = {{ env_name }}.issue.certificate.request
      groupId = {{ env_name }}-enrolment-reconciliation-group
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ enrolment_reconciliation_consumer_parallelism }}
      enrolment.reconciliation.parallelism = {{ enrolment_reconciliation_parallelism }}
      enrolment.complete.parallelism = {{ enrolment_complete_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    threshold.batch.write.size = {{ enrolment_reconciliation_batch_write_size }}
    activity {
      module.aggs.enabled = true
      collection.status.cache.expiry = {{ enrolment_reconciliation_collection_status_cache_expiry_time }}
    }
    service {
      search.basePath = "{{ kp_search_service_base_url }}"
    }


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['enrolment-reconciliation'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['enrolment-reconciliation'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['enrolment-reconciliation'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

asset-enrichment:
  asset-enrichment: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.learning.job.request
      groupId = {{ env_name }}-asset-enrichment-group
      video_stream.topic = {{ env_name }}.content.postpublish.request
    }
    task {
      checkpointing.timeout = 900000
      checkpointing.interval = {{ asset_enrichment_checkpointing_interval }}
      checkpointing.pause.between.seconds = {{ asset_enrichment_checkpointing_pause_interval }}
      consumer.parallelism = {{ asset_enrichment_consumer_parallelism }}
      router.parallelism = {{ asset_enrichment_router_parallelism }}
      imageEnrichment.parallelism = {{ image_enrichment_parallelism }}
      videoEnrichment.parallelism = {{ video_enrichment_parallelism }}
    }
    content {
      stream {
        enabled = true
        mimeType = ["video/mp4", "video/webm"]
      }
      youtube {
        applicationName = "fetch-youtube-license"
        regexPattern = ["\\?vi?=([^&]*)", "watch\\?.*v=([^&]*)", "(?:embed|vi?)/([^/?]*)", "^([A-Za-z0-9\\-\\_]*)"]
      }
      upload.context.driven = true
      max.iteration.count = 2
    }
    thumbnail.max {
      sample = 5
      size.pixel = 150
    }

    schema {
        base_path = "{{ kp_schema_base_path }}"
        supportedVersion = {
            itemset = "2.0"
        }
    }

    content_youtube_apikey="{{ youtube_api_key }}"
    cloud_storage_type="{{ cloud_store }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cloud_storage_content_bucketname }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['asset-enrichment'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['asset-enrichment'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['asset-enrichment'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

audit-history-indexer:
  audit-history-indexer: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "{{ env_name }}.learning.graph.events"
      groupId = "{{ env_name }}-audit-history-indexer-group"
    }

    task {
      consumer.parallelism = {{ audit_history_indexer_consumer_parallelism }}
      parallelism = {{ audit_history_indexer_parallelism }}
      window.time = 60
    }

    timezone = "IST"

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['audit-history-indexer'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['audit-history-indexer'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['audit-history-indexer'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

audit-event-generator:
  audit-event-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "{{ env_name }}.learning.graph.events"
      output.topic = "{{ env_name }}.telemetry.raw"
      groupId = "{{ env_name }}-audit-event-generator-group"
    }

    task {
      consumer.parallelism = {{ audit_event_generator_consumer_parallelism }}
      parallelism = {{ audit_event_generator_parallelism }}
      producer.parallelism = {{ audit_event_generator_producer_parallelism }}
    }

    schema {
      basePath = "{{ kp_schema_base_path }}"
    }

    channel.default = "{{ audit_event_generator_default_channel }}"


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['audit-event-generator'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['audit-event-generator'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['audit-event-generator'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

collection-cert-pre-processor:
  collection-cert-pre-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.issue.certificate.request
      output.topic = {{ env_name }}.generate.certificate.request
      output.failed.topic = {{ env_name }}.issue.certificate.failed
      event.output.topic = {{ env_name }}.event.generate.certificate.request
      groupId = {{ env_name }}-collection-cert-pre-processor-group
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      parallelism = {{collection_cert_pre_processor_consumer_parallelism}}
      consumer.parallelism = {{ collection_cert_pre_processor_consumer_parallelism }}
      generate_certificate.parallelism = {{generate_certificate_parallelism}}
      generate_event_certificate.parallelism = {{generate_event_certificate_parallelism}}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_enrolments.table = "{{ middleware_user_enrolments_table }}"
      course_batch.table = "{{ middleware_course_batch_table }}"
      assessment_aggregator.table = "{{ middleware_assessment_aggregator_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
      event_batch.table = "event_batch"
      user_event_enrolments.table = "user_entity_enrolments"

    }
    cert_domain_url = "{{ cert_domain_url }}"
    user_read_api = "/private/user/v1/read"
    content_read_api = "/content/v3/read"
    event_read_api = "/event/v4/read"
    service {
      content.basePath = "{{ content_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
    }
    redis-meta {
    {% if metadata2_redis_host is defined %}
      host = {{ metadata2_redis_host }}
    {% else %}
      host = {{ redis_host }}
    {% endif %}
      port = 6379
    }
    assessment.metrics.supported.contenttype = ["SelfAssess"]

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['collection-cert-pre-processor'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['collection-cert-pre-processor'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['collection-cert-pre-processor'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

program-cert-pre-processor:
  program-cert-pre-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.issue.program.certificate.request
      output.topic = {{ env_name }}.issue.certificate.request
      output.failed.topic = {{ env_name }}.issue.certificate.failed
      groupId = {{ env_name }}-program-cert-pre-processor-group
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      parallelism = {{program_cert_pre_processor_consumer_parallelism}}
      consumer.parallelism = {{ program_cert_pre_processor_consumer_parallelism }}
      generate_certificate.parallelism = {{generate_certificate_parallelism}}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_enrolments.table = "{{ middleware_user_enrolments_table }}"
      course_batch.table = "{{ middleware_course_batch_table }}"
      assessment_aggregator.table = "{{ middleware_assessment_aggregator_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
    }
    cert_domain_url = "{{ cert_domain_url }}"
    user_read_api = "/private/user/v1/read"
    content_read_api = "/content/v3/read"
    service {
      content.basePath = "{{ content_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
    }
    redis-meta {
    {% if metadata2_redis_host is defined %}
      host = {{ metadata2_redis_host }}
    {% else %}
      host = {{ redis_host }}
    {% endif %}
      port = 6379
      database.collectionIndex = 10
    }
    assessment.metrics.supported.contenttype = ["SelfAssess"]

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['program-cert-pre-processor'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['program-cert-pre-processor'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['program-cert-pre-processor'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

collection-certificate-generator:
  collection-certificate-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.generate.certificate.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      groupId = {{ env_name }}-certificate-generator-group
      program.cert.output.topic= {{ env_name }}.issue.program.certificate.request
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ collection_certificate_generator_consumer_parallelism }}
      parallelism = {{ collection_certificate_generator_parallelism }}
      notifier.parallelism = {{ collection_certificate_generator_notifier_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      user_enrolments.table = "{{ middleware_user_enrolments_table }}"
      course_batch.table = "{{ middleware_course_batch_table }}"
      sbkeyspace = "{{ registry_sunbird_keyspace }}"
      certreg.table ="{{ cert_registry_table }}"
    }
    cert_domain_url = "{{ cert_domain_url }}"
    web.portal.url = "{{ cert_domain_url }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cert_container_name }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"

    service {
      certreg.basePath = "{{ cert_reg_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
      enc.basePath = "{{ enc_service_base_url }}"
      rc.basePath = "{{ cert_rc_base_url }}"
      rc.entity = "{{ cert_rc_entity }}"
    }
    enable.suppress.exception = {{ collection_certificate_generator_enable_suppress_exception | lower }}
    enable.rc.certificate = false


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['collection-certificate-generator'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['collection-certificate-generator'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['collection-certificate-generator'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

event-cert-generator:
  event-cert-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.event.generate.certificate.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      groupId = {{ env_name }}-event-certificate-generator-group
      program.cert.output.topic= {{ env_name }}.event.generate.certificate.failed
      output.karma.point.topic = "{{env_name}}.user.claim.event.karma.points"
      output.dashboard.topic = "{{env_name}}.dashboard.user.state"
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ event_cert_generator_consumer_parallelism }}
      parallelism = {{ event_cert_generator_parallelism }}
      notifier.parallelism = {{ event_cert_generator_notifier_parallelism }}
      dashboard.parallelism = {{ event_cert_generator_dashboard_parallelism }}
      karmapoints.parallelism = {{ event_cert_generator_karmapoints_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      user_enrolments.table = "user_entity_enrolments"
      course_batch.table = "{{ middleware_course_batch_table }}"
      sbkeyspace = "{{ registry_sunbird_keyspace }}"
      certreg.table ="{{ cert_registry_table }}"
      user_event_enrolments.table = "user_entity_enrolments"
      event_batch.table = "event_batch"
    }
    cert_domain_url = "{{ cert_domain_url }}"
    web.portal.url = "{{ cert_domain_url }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cert_container_name }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"

    service {
      certreg.basePath = "{{ cert_reg_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
      enc.basePath = "{{ enc_service_base_url }}"
      rc.basePath = "{{ cert_rc_base_url }}"
      rc.entity = "{{ cert_rc_entity }}"
    }
    enable.suppress.exception = {{ event_cert_generator_enable_suppress_exception | lower }}
    enable.rc.certificate = false


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['event-cert-generator'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['event-cert-generator'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['event-cert-generator'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

user-activity-analysis-updater:
  user-activity-analysis-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.dashboard.user.state
      groupId = {{ env_name }}-dashboard-user-state-activity-group
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      parallelism = {{user_activity_analysis_updater_consumer_parallelism}}
      consumer.parallelism = {{ user_activity_analysis_updater_consumer_parallelism }}
      generate_certificate.parallelism = {{generate_certificate_parallelism}}
      generate_event_certificate.parallelism = {{generate_event_certificate_parallelism}}
    }
    lms-cassandra {
      keyspace = "sunbird"
      user.table = "user"
      course_batch.table = "course_batch"
      assessment_aggregator.table = "assessment_aggregator"
      user_activity_agg.table = "user_activity_agg"
    }

    postgres {
      host = "{{igot_postgres_db_ip}}"
      port = "5432"
      database = "sunbird"
      username = "{{postgresql_username_sunbird}}"
      password = "{{postgresql_password_sunbird}}"
    }

    cert_domain_url = "{{ cert_domain_url }}"
    user_read_api = "/private/user/v1/read"
    content_read_api = "/content/v3/read"
    service {
      content.basePath = "{{ content_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
    }

    redis-meta {
    {% if metadata2_redis_host is defined %}
      host = {{ metadata2_redis_host }}
    {% else %}
      host = {{ redis_host }}
    {% endif %}
      port = 6379
    }

    assessment.metrics.supported.contenttype = ["SelfAssess"]
    enable.suppress.exception = true

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['user-activity-analysis-updater'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['user-activity-analysis-updater'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['user-activity-analysis-updater'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

karma-points-persist-processor:
  karma-points-persist-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.course.completion.topic = "{{ env}}.issue.certificate.request"
      input.rating.topic = "{{ env}}.rating.event"
      input.first.login.topic = "{{ env}}.user.first.login"
      input.first.enrolment.topic = "{{ env}}.user.enrolment.event"
      input.claim.acbp.karma.points.topic = "{{ env}}.user.claim.acbp.karma.points"
      input.event.attended.topic = "{{env}}.user.claim.event.karma.points"
      groupId = "{{ env}}-karma-points-processor-group"
    }
    task {
      parallelism = {{ karma_points_persist_processor_parallelism }}
      consumer.parallelism = {{ karma_points_persist_processor_consumer_parallelism }}
      generate_certificate.parallelism = {{ karma_points_persist_processor_generate_certificate_parallelism }}
    }

      karmapoints {
      acbpQuotaKarmaPoints = 10
      courseCompletionQuotaKarmaPoints = 5
      assessmentQuotaKarmaPoints = 5
      ratingQuotaKarmaPoints = 2
      firstLoginQuotaKarmaPoints = 5
      firstEnrolmentQuotaKarmaPoints = 5
      nonAcbpCourseQuota = 4
      eventQuotaKarmaPoints = 10
    }
    cassandra {
      sunbird.keyspace = "sunbird"
      sunbird_courses.keyspace = "sunbird_courses"
      content_hierarchy.keyspace="{{ env}}_hierarchy_store"
      user_karma_points.table="{{ user_karma_points_table }}"
      user_karma_points_credit_lookup.table="{{ user_karma_points_credit_lookup_table }}"
      content_hierarchy.table="content_hierarchy"
      user_enrolments.table="user_enrolments"
      user.table = "user"
      user_karma_points_summary.table= "user_karma_points_summary"
      user_assessment_data.table = "user_assessment_data"
      course_batch.table = "course_batch"
    }

    service {
      cbplan.basePath = "{{ cb_ext_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
      event.read = "{{ core_content_service_base_url }}event/v4/read/"
    }
    enable.suppress.exception = true

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['karma-points-persist-processor'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['karma-points-persist-processor'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['karma-points-persist-processor'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

content-publish:
  content-publish: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.publish.job.request
      post_publish.topic = {{ env_name }}.content.postpublish.request
      mvc.topic = "{{ env_name }}.mvc.processor.job.request"
      error.topic = "{{ env_name }}.learning.events.failed"
      groupId = {{ env_name }}-content-publish-group
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
      router.parallelism = 1
    }
    redis {
      host={{redis_host}}
      port=6379
      database {
        contentCache.id = 0
      }
    }
    content {
      bundleLocation = "/tmp/contentBundle"
      isECARExtractionEnabled = true
      retry_asset_download_count = 1
      keyspace = "{{ content_keyspace_name }}"
      table = "content_data"
      tmp_file_location = "/tmp"
      objectType = ["Content", "ContentImage","Collection","CollectionImage","Event"]
      mimeType = ["application/pdf", "video/avi", "video/mpeg", "video/quicktime", "video/3gpp", "video/mpeg", "video/mp4", "video/ogg", "video/webm", "application/vnd.ekstep.html-archive","application/vnd.ekstep.ecml-archive","application/vnd.ekstep.content-collection"
                                              "application/vnd.ekstep.ecml-archive",
                                                "application/vnd.ekstep.html-archive",
                                                "application/vnd.android.package-archive",
                                                "application/vnd.ekstep.content-archive",
                                                "application/octet-stream",
                                                 "application/json",
                                                 "application/javascript",
                                                 "application/xml",
                                                 "text/plain",
                                                 "text/html",
                                                 "application/survey",
                                                 "text/javascript",
                                                 "text/xml",
                                                 "text/css",
                                                 "image/jpeg", "image/jpg", "image/png", "image/tiff", "image/bmp", "image/gif", "image/svg+xml",
                                                 "image/x-quicktime",
                                                 "video/avi", "video/mpeg", "video/quicktime", "video/3gpp", "video/mpeg", "video/mp4", "video/ogg", "video/webm",
                                                 "video/msvideo",
                                                 "video/x-msvideo",
                                                 "video/x-qtc",
                                                 "video/x-mpeg",
                                                 "audio/mp3", "audio/mp4", "audio/mpeg", "audio/ogg", "audio/webm", "audio/x-wav", "audio/wav",
                                                 "audio/mpeg3",
                                                 "audio/x-mpeg-3",
                                                 "audio/vorbis",
                                                 "application/x-font-ttf",
                                                 "application/pdf", "application/epub", "application/msword",
                                                 "application/vnd.ekstep.h5p-archive",
                                                 "application/vnd.ekstep.plugin-archive",
                                                 "video/x-youtube", "video/youtube",
                                                 "text/x-url","application/offline",
                                                 "application/html"]
      asset_download_duration = "60 seconds"
      stream {
        enabled = {{ content_stream_enabled | lower }}
        mimeType = ["video/mp4", "video/webm"]
      }
      artifact.size.for_online= {{ content_artifact_size_for_online }}

      downloadFiles {
        spine = ["appIcon"]
        full = ["appIcon", "grayScaleAppIcon", "artifactUrl", "itemSetPreviewUrl", "media"]
      }

      nested.fields = ["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "taxonomyPaths_v2", "competencies_v3", "test_competencies_v2", "competencies_v2", "secureSettings", "test_competencies_v4", "competencies_v5", "test_secureSettings", "competencies_v6"]
      restrict.objectTypes = ["EventSet", "Questionnaire", "Misconception", "FrameworkType", "EventSetImage", "EventImage"]
    }
    cloud_storage {
        folder {
            content = "content"
            artifact = "artifact"
        }
    }
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_container="{{ cloud_storage_content_bucketname }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"

    hierarchy {
      keyspace = "{{ hierarchy_keyspace_name }}"
      table = "content_hierarchy"
    }

    contentTypeToPrimaryCategory {
      ClassroomTeachingVideo: "Explanation Content"
      ConceptMap: "Learning Resource"
      Course: "Course"
      CuriosityQuestionSet: "Practice Question Set"
      eTextBook: "eTextbook"
      ExperientialResource: "Learning Resource"
      ExplanationResource: "Explanation Content"
      ExplanationVideo: "Explanation Content"
      FocusSpot: "Teacher Resource"
      LearningOutcomeDefinition: "Teacher Resource"
      MarkingSchemeRubric: "Teacher Resource"
      PedagogyFlow: "Teacher Resource"
      PracticeQuestionSet: "Practice Question Set"
      PracticeResource: "Practice Question Set"
      SelfAssess: "Course Assessment"
      TeachingMethod: "Teacher Resource"
      TextBook: "Digital Textbook"
      Collection: "Content Playlist"
      ExplanationReadingMaterial: "Learning Resource"
      LearningActivity: "Learning Resource"
      LessonPlan: "Content Playlist"
      LessonPlanResource: "Teacher Resource"
      PreviousBoardExamPapers: "Learning Resource"
      TVLesson: "Explanation Content"
      OnboardingResource: "Learning Resource"
      ReadingMaterial: "Learning Resource"
      Template: "Template"
      Asset: "Asset"
      Plugin: "Plugin"
      LessonPlanUnit: "Lesson Plan Unit"
      CourseUnit: "Course Unit"
      TextBookUnit: "Textbook Unit"
      Asset: "Certificate Template"
      Course: "Program"
      Course: "Blended Program"
      Course: "Curated Program"
      Course: "Moderated Program"
    }
    compositesearch.index.name = "compositesearch"
    search.document.type = "cs"
    content.ecar.file.generation.enabled = false

    Course="Program"
    Course="Mandatory Course Goal"


    master.category.validation.enabled ="{{ master_category_validation_enabled }}"
    service {
      print.basePath = "{{ kp_print_service_base_url }}"
    }

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['content-publish'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['content-publish'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['content-publish'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

notification-job:
  notification-job: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ kafka_topic_lms_notification }}
      groupId = {{ kafka_group_lms_notification }}
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ notification_job_consumer_parallelism }}
      parallelism = {{ notification_job_parallelism }}
    }
    fcm_account_key= "{{ core_vault_sunbird_fcm_account_key }}"
    sms_auth_key= "{{sunbird_msg_91_auth}}"
    mail_server_from_email= "{{sunbird_mail_server_from_email}}"
    sms_default_sender= "{{sunbird_notification_msg_default_sender}}"
    mail_server_username= "{{sunbird_mail_server_username}}"
    mail_server_password= "{{sunbird_mail_server_password}}"
    mail_server_host= "{{sunbird_mail_server_host}}"
    mail_server_port= "{{sunbird_mail_server_port}}"
    mail_server_use_tls= "{{mail_server_use_tls}}"


  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['notification-job'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['notification-job'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['notification-job'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

common-certificate-generator-utility:
  common-certificate-generator-utility: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.common.generate.certificate.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      groupId = {{ env_name }}-common-certificate-generator-group
      program.cert.output.topic= {{ env_name }}.issue.program.certificate.request
    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ common_certificate_generator_utility_consumer_parallelism }}
      parallelism = {{ common_certificate_generator_utility_parallelism }}
      notifier.parallelism = {{ common_certificate_generator_utility_notifier_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      user_enrolments.table = "user_external_enrolments"
      course_batch.table = "{{ middleware_course_batch_table }}"
      sbkeyspace = "{{ registry_sunbird_keyspace }}"
      certreg.table ="{{ cert_registry_table }}"
      ext_config.table = "ext_config"
    }
    cert_domain_url = "{{ cert_domain_url }}"
    web.portal.url = "{{ cert_domain_url }}"
    cloud_storage_container="{{ cert_container_name }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"
    service {
      certreg.basePath = "{{ cert_reg_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
      enc.basePath = "{{ enc_service_base_url }}"
      rc.basePath = "{{ cert_rc_base_url }}"
      rc.entity = "{{ cert_rc_entity }}"
    }
    enable.suppress.exception = {{ common_certificate_generator_utility_enable_suppress_exception | lower }}
    enable.rc.certificate = false

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['common-certificate-generator-utility'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['common-certificate-generator-utility'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['common-certificate-generator-utility'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1

assessment-public-certificate-generator:
  assessment-public-certificate-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = {{ env_name }}.assessment.public.certificate.request
      output.audit.topic = {{ env_name }}.telemetry.raw
      groupId = {{ env_name }}-assessment-public-certificate-generator-group
      program.cert.output.topic= {{ env_name }}.issue.program.certificate.request
      output.postprocess.topic="{{ env_name }}.public.assessment.cert.generation.post.process"

    }
    task {
      restart-strategy.attempts = {{ restart_attempts }} # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = {{ assessment_public_certificate_generator_consumer_parallelism }}
      parallelism = {{ assessment_public_certificate_generator_parallelism }}
      notifier.parallelism = {{ assessment_public_certificate_generator_notifier_parallelism }}
    }
    lms-cassandra {
      keyspace = "{{ registry_sunbird_keyspace }}"
      user_enrolments.table = "{{public_assessment_service_assessment_data}}"

      course_batch.table = "{{ middleware_course_batch_table }}"
      sbkeyspace = "{{ registry_sunbird_keyspace }}"
      certreg.table ="{{ cert_registry_table }}"
      ext_config.table = "ext_config"
    }
    cert_domain_url = "{{ cert_domain_url }}"
    web.portal.url = "{{ cert_domain_url }}"
    cloud_storage_container="{{ cert_container_name }}"
    cloud_storage_type="{{ cloud_service_provider }}"
    cloud_storage_secret="{{ cloud_storage_secret | replace('\n', '\\n') }}"
    cloud_storage_key="{{ cloud_storage_key }}"
    cloud_storage_endpoint="{{ cloud_storage_endpoint }}"
    service {
      certreg.basePath = "{{ cert_reg_service_base_url }}"
      learner.basePath = "{{ learner_service_base_url }}"
      enc.basePath = "{{ enc_service_base_url }}"
      rc.basePath = "{{ cert_rc_base_url }}"
      rc.entity = "{{ cert_rc_entity }}"
    }
    enable.suppress.exception = {{ assessment_public_certificate_generator_enable_suppress_exception | lower }}
    enable.rc.certificate = false
    encryption.key="{{public_assessment_service_encryption_key}}"

  flink-conf: |+
    jobmanager.memory.flink.size: {{ flink_job_names['assessment-public-certificate-generator'].jobmanager_memory }}
    taskmanager.memory.flink.size: {{ flink_job_names['assessment-public-certificate-generator'].taskmanager_memory }}
    taskmanager.numberOfTaskSlots: {{ flink_job_names['assessment-public-certificate-generator'].taskslots }}
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
